@model LKP_Frontend_MVC.Models.Response.Common.ResponsePayLoad;

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Client Dealer Mapping";
    var clientDealerList = Model.data as List<LKP_Frontend_MVC.Models.Response.ClientDealer.ClientDealerResponse>;
    var inputModel = Model.message as LKP_Frontend_MVC.Models.Request.Common.PageInputModel;
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-end mb-3" style="height: 50px;">
        <h2>Client Dealer Mapping</h2>

        <div class="d-flex align-items-end gap-2">
            <form>
                <button type="submit"
                        class="btn btn-success p-2 d-flex align-items-center gap-1"
                        formaction="/Excel/ExportClientDealerExcel"
                        formmethod="post"
                        style="height: 40px;">
                    <i class="bi bi-file-earmark-excel"></i> Export to Excel
                </button>
            </form>
            
            <a href="@Url.Action("Index", "ClientDealer")" class="btn btn-secondary p-2" style="width: 60px; height: 40px;">
                Clear
            </a>

            <!-- Form inside a div to align inputs on the same row -->
            <div class="d-flex gap-2 align-items-end">
                <form id="filterForm" method="post" action="/ClientDealer/Index">
                    <div class="d-flex gap-2 align-items-end">
                        <div>
                            <label for="filterField" class="form-label">Filter</label>
                            <select id="filterField" name="filterField" class="form-select" required style="width: 150px;">
                                <option value="Category" selected="@(inputModel?.Category != "" ? "selected" : null)">Category</option>
                                <option value="Zone" selected="@(inputModel?.Zone != "" ? "selected" : null)">Zone</option>
                                <option value="ClientCode" selected="@(inputModel?.ClientCode != "" ? "selected" : null)">Client Code</option>
                                <option value="ClientName" selected="@(inputModel?.ClientName != "" ? "selected" : null)">Client Name</option>
                                <option value="branch" selected="@(inputModel?.branch != "" ? "selected" : null)">Branch</option>
                                <option value="DealerID" selected="@(inputModel?.DealerID != "" ? "selected" : null)">Dealer Code</option>
                                <option value="DealerName" selected="@(inputModel?.DealerName != "" ? "selected" : null)">Dealer Name</option>
                            </select>
                        </div>

                        <div>
                            <label for="filterValue" class="form-label">Value</label>
                            <input type="text" id="filterValue" class="form-control" value="@(
                            !string.IsNullOrEmpty(inputModel?.Zone) ? inputModel.Zone :
                            !string.IsNullOrEmpty(inputModel?.ClientCode) ? inputModel.ClientCode :
                            !string.IsNullOrEmpty(inputModel?.ClientName) ? inputModel.ClientName :
                            !string.IsNullOrEmpty(inputModel?.branch) ? inputModel.branch :
                            !string.IsNullOrEmpty(inputModel?.DealerID) ? inputModel.DealerID :
                            !string.IsNullOrEmpty(inputModel?.DealerName) ? inputModel.DealerName :
                            inputModel?.Category)
                            " style="width: 15em;" />
                        </div>
                        <!-- Dynamic Input: Empty initially, filled via JS -->
                        <input type="hidden" id="dynamicInput" name="" value="" />
                        <button type="submit" class="btn btn-primary p-2" style="width: 40px; height: 40px;">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    @if(clientDealerList.Count >= 1) {
        <table class="table table-bordered table-striped" style="background: #11395C;">
            <thead style="background: #11395C; color: white;">
                <tr>
                    <th style="background-color: #11395C !important; color: white !important;">Client Code</th>
                    <th style="background-color: #11395C !important; color: white !important;">Client Name</th>
                    <th style="background-color: #11395C !important; color: white !important;">Zone</th>
                    <th style="background-color: #11395C !important; color: white !important;">Branch</th>
                    <th style="background-color: #11395C !important; color: white !important;">Dealer Code</th>
                    <th style="background-color: #11395C !important; color: white !important;">Dealer Name</th>
                    <th style="background-color: #11395C !important; color: white !important;">Category</th>
                </tr>
            </thead>
            <tbody>
                <!-- Example row, replace with dynamic data later -->
                @foreach (var item in clientDealerList)
                {
                    <tr>
                        <td>@item.ClientCode</td>
                        <td>@item.ClientName</td>
                        <td>@item.Zone</td>
                        <td>@item.Branch</td>
                        <td>@item.DealerID</td>
                        <td>@item.DealerName</td>
                        <td>@item.Category</td>
                    </tr>
                }
            </tbody>
        </table>
    } else
    {
        <h2>No Records Found!</h2>
    }
    <div class="d-flex justify-content-between mt-4">
        @if (inputModel?.Start > 1)
        {
            <a class="btn btn-secondary"
               href="@Url.Action("Index", new {
                   Start = inputModel.Start - 1,
                   PageSize = inputModel.PageSize,
                   Zone = inputModel.Zone,
                   ClientCode = inputModel.ClientCode,
                   ClientName = inputModel.ClientName,
                   branch = inputModel.branch,
                   DealerID = inputModel.DealerID,
                   DealerName = inputModel.DealerName,
                   Category = inputModel.Category
       })">
                &laquo; Previous
            </a>
        }
        @if (clientDealerList?.Count >= 50)
        {
            <a class="btn btn-primary"
               href="@Url.Action("Index", new {
               Start = inputModel.Start + 1,
               PageSize = inputModel.PageSize,
               Zone = inputModel.Zone,
               ClientCode = inputModel.ClientCode,
               ClientName = inputModel.ClientName,
               branch = inputModel.branch,
               DealerID = inputModel.DealerID,
               DealerName = inputModel.DealerName,
               Category = inputModel.Category
       })">
                Next &raquo;
            </a>
        }
    </div>
</div>
@section Scripts {
    <script src="~/js/filter.js"></script>
}